#ifndef ACCEL_RESULT
#define ACCEL_RESULT

#include <accel/macros>
#include <utility>

namespace accel
{
    template<typename T, typename ErrorT>
    class result
    {
    public:
        explicit result(const T& value) : 
            m_has_value(true)
        {
            new (&m_value) T(value);
        }
        
        explicit result(const ErrorT& error) :
            m_has_value(false)
        {
            new (&m_error) ErrorT(error);
        }
        
        result(T&& value) :
            m_has_value(true)
        {
            new (&m_value) T(std::move(value));
        }

        result(ErrorT&& error) :
            m_has_value(false)
        {
            new (&m_error) ErrorT(std::move(error));
        }

        result(const result& other) :
            m_has_value(other.m_has_value)
        {
            if (m_has_value)
                new (&m_value) T(other.m_value);
            else
                new (&m_error) ErrorT(other.m_error);
        }

        result(result&& other) :
            m_has_value(other.m_has_value)
        {
            if (m_has_value)
                new (&m_value) T(std::move(other.m_value));
            else
                new (&m_error) ErrorT(std::move(other.m_error));
        }

        ~result()
        {       
            if (m_has_value)
                m_value.~T();
            else
                m_error.~ErrorT();
        }

        bool has_value() const { return m_has_value; }
        bool has_error() const { return !m_has_value; }

        T& get_value() const { return m_value; }
        ErrorT get_error() const { return m_error; }

        T value_or(T option) const
        {
            return m_has_value ? m_value : option;
        }

        ErrorT error_or(ErrorT error) const
        {
            return m_has_value ? error : m_error;
        }
        
    private:
        bool m_has_value;
        union
        {
            ErrorT m_error;
            T m_value;
        };
    };
}

#endif